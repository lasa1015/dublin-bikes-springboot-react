# 这个工作流程的名字，显示在 GitHub Actions 页面里
name: Build and Push Docker Images

# 设置触发条件：只要 push 到 main 分支就会自动执行
on:
  push:
    branches:
      - main   # 你也可以改成 dev 或其他分支名

jobs:
  build-and-push:       # 作业名称，可以随便起
    runs-on: ubuntu-latest   # 指定 GitHub 提供的运行环境（Ubuntu）

    steps:
      # 第一步：拉取你的代码仓库
      - name: Checkout repository
        uses: actions/checkout@v3

      # 第二步：设置 Docker Buildx，支持多平台构建
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第三步：登录到 Docker Hub，使用你在仓库 Secret 中配置的用户名和 token
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}   # 你的 Docker Hub 用户名
          password: ${{ secrets.DOCKERHUB_TOKEN }}      # 你的 Docker Hub Token

      # 以下是逐个服务的构建和推送逻辑：

      # 构建并推送 backend 镜像
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend             # 指定 Dockerfile 所在路径
          push: true                     # 自动推送到 Docker Hub
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

      # 构建并推送 frontend 镜像
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

      # 构建并推送 predictor 镜像
      - name: Build and push predictor image
        uses: docker/build-push-action@v5
        with:
          context: ./predictor
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/predictor:latest

      # 构建并推送 scraper 镜像
      - name: Build and push scraper image
        uses: docker/build-push-action@v5
        with:
          context: ./scraper
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/scraper:latest
